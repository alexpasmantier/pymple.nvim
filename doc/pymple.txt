*pymple.txt*                                               pymple.nvim Help File
================================================================================
NVIM                                                               *pymple.nvim*

This plugin attempts to provide missing utilities when working with Python
imports inside Neovim.

These utilities include:
- automatic update of imports when renaming/moving a file or a folder
- automatic symbol import resolution based on your current workspace and 
  installed python packages

M.setup({opts})                                                    *M.setup()*
    Setup pymple.nvim with the provided configuration


    Parameters: ~
        {opts} (Config)



================================================================================
CONFIG                                                           *pymple.config*

The default configuration is as follows:

```lua
default_config = {
{
  -- options for the update imports feature
  update_imports = {
    -- the filetypes on which to run the update imports command
    -- NOTE: this should at least include "python" for the plugin to
    -- actually do anything useful
    filetypes = { "python", "markdown" }
  },
  -- options for the add import for symbol under cursor feature
  add_import_to_buf = {
    -- whether to autosave the buffer after adding the import (which will
    -- automatically format/sort the imports if you have on-save autocommands)
    autosave = true
  },
  -- automatically register the following keymaps on plugin setup
  keymaps = {
    -- Resolves import for symbol under cursor.
    -- This will automatically find and add the corresponding import to
    -- the top of the file (below any existing doctsring)
    resolve_import_under_cursor = {
      desc = "Resolve import under cursor",
      keys = "<leader>li"  -- feel free to change this to whatever you like
    }
  },
  -- logging options
  logging = {
    -- whether to log to the neovim console (only use this for debugging
    -- as it might quickly ruin your neovim experience)
    console = {
      enabled = false
    },
    -- whether or not to log to a file (default location is nvim's
    -- stdpath("data")/pymple.vlog which will typically be at
    -- `~/.local/share/nvim/pymple.vlog` on unix systems)
    file = {
      enabled = true,
      -- the maximum number of lines to keep in the log file (pymple will
      -- automatically manage this for you so you don't have to worry about
      -- the log file getting too big)
      max_lines = 1000,
      path = "/Users/alex/.local/share/nvim/pymple.vlog"
    },
    -- the log level to use
    -- (one of "trace", "debug", "info", "warn", "error", "fatal")
    level = "info"
  },
  -- python options
  python = {
    -- the names of root markers to look out for when discovering a project
    root_markers = { "pyproject.toml", "setup.py", ".git", "manage.py" },
    -- the names of virtual environment folders to look out for when
    -- discovering a project
    virtual_env_names = { ".venv" }
  }
}

```

config                                                                *config*


    Fields: ~
        {user_config}    (Config)
        {HL_GROUPS}      (HlGroups)
        {default_config} (Config)


HlGroups                                                            *HlGroups*


    Fields: ~
        {Error}   (string)
        {Warning} (string)
        {More}    (string)
        {Mode}    (string)


Keymaps                                                              *Keymaps*



UpdateImportsOptions                                    *UpdateImportsOptions*


    Fields: ~
        {filetypes} (string[])


AddImportToBufOptions                                  *AddImportToBufOptions*


    Fields: ~
        {autosave} (boolean)


LoggingOptions                                                *LoggingOptions*



PythonOptions                                                  *PythonOptions*


    Fields: ~
        {virtual_env_names} (string[])
        {root_markers}      (string[])


Config                                                                *Config*


    Fields: ~
        {keymaps}           (Keymaps)
        {update_imports}    (UpdateImportsOptions)
        {add_import_to_buf} (AddImportToBufOptions)
        {logging}           (LoggingOptions)
        {python}            (PythonOptions)


M.HL_GROUPS()                                                  *M.HL_GROUPS()*



M.default_config()                                        *M.default_config()*



M:validate_configuration()                        *M:validate_configuration()*


    Return: ~
        boolean



================================================================================
API                                                                 *pymple.api*

Pymple's API module exposes some of the main functions used by the plugin.

At the moment, the following functions are exposed:
 - `add_import_for_symbol_under_cursor`: Resolves import for symbol under
   cursor.
 - `update_imports`: Update all imports in workspace after renaming `source` to
   `destination`.

M.resolve_import_under_cursor()              *M.resolve_import_under_cursor()*
    Resolves import for symbol under cursor. This will automatically find and
    add the corresponding import to the top of the file (below any existing
    doctsring)



M.update_imports({source}, {destination}, {opts})         *M.update_imports()*
    Update all imports in workspace after renaming `source` to `destination`


    Parameters: ~
        {source}      (string)                The path to the source file/dir
                                              (before renaming/moving)
        {destination} (string)                The path to the destination
                                              file/dir (after renaming/moving)
        {opts}        (UpdateImportsOptions)  Options for the update imports
                                              operation



 vim:tw=78:ts=8:ft=help:norl:
